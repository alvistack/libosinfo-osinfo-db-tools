libosinfo 0.01
_______________________________________________________________________________


*******************************************************************************

TYPES

*******************************************************************************

osi_lib_t : an opaque handle to a library instance.
osi_hypervisor_t : represents a hypervisor.

osi_os_t : represents an operating system object.
osi_os_id_t : represents the unique ID for an operating system.
osi_os_list_t : a list of osi_os_t objects.
osi_filter_t: filter for searching through distros.

osi_device_t : represents a device
osi_device_id_t : represents a device ID
osi_device_list_t : represents a list of devices

*******************************************************************************

METHODS

*******************************************************************************
_______________________________________

Manipulating the Library
_______________________________________

osi_lib_t osi_get_lib_handle(void)
         Get a handle to the library itself. The return type is either a valid
         library handle, or an invalid structure should the operation fail. The
         user must check the return value with a call to osi_is_error(handle).

int osi_set_lib_param(osi_lib_t lib, char* key, char* val)
         Set an environment parameter for the library. This could be something
         like libvirt version, which would affect the data query results. We
         can only set parameters before the library has been initialized.

         Returns 0 on success, and an errno style error code otherwise.

char* osi_get_lib_param(osi_lib_t lib, char* key)
         Returns the current value for a given parameter, or NULL if it has not
         been set. The user must free the returned value after use.

int osi_init_lib(osi_lib_t lib)
         Initializes the library given the current parameters. Once this
         method is called, the library parameters cannot be changed.

         Returns 0 on success, and an errno style error code otherwise.

         If the operation succeeds, then after the user is done querying the
         library for information, he must close the library and dispose of
         the handle with osi_dispose_lib(lib).
         
         If the operation fails, the user must still dispose of the library
         handle using osi_dispose_lib(lib).

int osi_close_lib(osi_lib_t lib)
         Dispose of the library handle, possibly closing the library and
         cleaning up resources if the library was initialized.

         Returns 0 on success, and an errno style error code otherwise.

_______________________________________

Setting the Hypervisor
_______________________________________

char** osi_get_all_hypervisor_rdfs(osi_lib_t lib, int* num)
         Returns an array of all hypervisor rdf identifiers. If num == 0, the
         returned result need not be freed. This would not be an error condition;
         instead, it would signify that the library does not know of any
         hypervisor specific information.

int osi_set_hypervisor(osi_lib_t lib, char* hypervisor_rdf)
         Set the hypervisor before initializing the library. After the
         library handle is initialized, the hypervisor is fixed. If the
         given hypervisor_rdf is NULL, then we use the 'default' hypervisor
         that supports all devices.

         Returns 0 on success, or an errno style error code otherwise.

osi_hypervisor_t osi_get_hypervisor(osi_lib_t lib)
         Returns a handle to the currently set hypervisor. If no hypervisor
         is set, returns a handle to the 'generic' hypervisor that supports
         all devices.

         The return value must be checked with osi_is_error(handle).

char* osi_get_hv_id(osi_hypervisor_t hv)
         Returns a string representation of the hypervisor ID. Must be freed
         when done with.

_______________________________________

Manipulating a given hypervisor
_______________________________________

char* osi_get_hv_property_first_value(osi_hypervisor_t hv, char* propname);
         Returns the value for a given property, for this hypervisor.
         In the case where a property has multiple values, return the first.
         This is considered to be the preferred value compared to all others.

         Returns a dynamically allocated char*, or NULL if there is no value.
         The user must free the char* when he is finished with it.

char** osi_get_hv_property_all_values(osi_hypervisor_t hv, char* propname, int* num)
         Returns all values for a given property as an array of char*. Each
         char* in the array, and the array itself, must be freed when finished.
         The number of returned results is stored in num. If num == 0 when the
         method returns, the returned array is not initialized and must not be
         freed.

char** osi_get_all_property_keys(osi_hypervisor_t hv, int* num);
         Returns an array containing the names of all properties defined for
         this hypervisor. The length of the array is stored in num. Must be
         freed when done using. If num == 0, the return value is uninitialized
         and must not be freed.

char** osi_get_hv_device_sections(osi_hypervisor_t hv, int* num)
         Returns an array containing the name of all device sections defined
         for this hypervisor. The length of the array is stored in num. Must be
         freed when done using. If num == 0, the return value is uninitialized
         and must not be freed.

_______________________________________

Getting Devices
_______________________________________


osi_device_list_t osi_hypervisor_all_devices(osi_hypervisor_t hv, char* section)
         Returns a list of all devices supported by the hypervisor, in the
         given section. The list returned by this method must be checked 
         against osi_is_error(handle).

         After finishing with the list, the user must free the list with
         osi_put_devices_list(devices).

osi_device_list_t osi_distro_all_devices(osi_os_t os)
         Returns a list of all devices supported by the os, given the current
         hypervisor. The list returned by this method must be checked against
         osi_is_error(handle).

         After finishing with the list, the user must free the list with
         osi_put_devices_list(devices).

osi_device_list_t osi_match_devices(osi_os_t os, 
                                    char* section, 
                                    char* property, 
                                    char* value)
         Returns a list of all devices supported by the current os-hypervisor
         combination, that possess the same value for a given property, within
         the given section. The list returned by this method must be checked
         against osi_is_error(handle).

         After finishing with the list, the user must free the list with
         osi_put_devices_list(devices).

int osi_put_devices_list(osi_device_list_t devices)
         Frees the given device list. Returns 0 on success or an errno style
         error otherwise.

int osi_devices_list_length(osi_device_list_t devices)
         Returns the length of a given device list.

osi_device_t osi_get_device_by_index(osi_device_list_t devices, int index)
         Returns a handle to a device at a given index in a device list.

osi_device_t osi_get_device_by_id(osi_device_id_t device_id)
         Returns a handle to a device specified by the given opaque id.

osi_device_t osi_get_preferred_device(osi_os_t os, 
                                      char* section, 
                                      char* property, 
                                      char* value)
         Returns a handle to the preferred device matching the given property
         and value, within the given section.

_______________________________________

Manipulating Devices
_______________________________________


osi_device_id_t osi_device_id(osi_device_t device)
         Returns the opaque device id for this device.

char* osi_get_device_property_value(osi_device_t device, char* property)
         Get the first value for the given property, for the given device.
         Must be freed when finished with use.

char* osi_get_device_driver(osi_device_t device, osi_os_t os)
         For a given device, os and hypervisor combination, return the
         appropriate device driver, or NULL if there isn't any. Must be freed
         when finished with use.

char** osi_get_device_property_all_values(osi_device_t device, char* property, int* num)
         Returns all values for a given property, for the given device. The 
         length of the array is stored in num. Must be freed when finished
         with use. If num == 0, the return value is invalid and need not be 
         freed.

char** osi_get_all_property_keys(osi_device_t device, int* num)
         Returns all properties for a given device. The length of the array is
         stored in num. Must be freed when finished with use. If num == 0, the
         the return value is valid and need not be freed.

_______________________________________

Getting Operating System objects
_______________________________________

osi_os_list_t osi_get_os_list(osi_lib_t lib, osi_os_filter_t filter)
         Return a list of all operating systems that satisfy the given filter.
         The returned value must be checked with osi_is_error(handle). When
         finished with use, we must use osi_free_os_list(list).

int osi_free_os_list(osi_os_list_t list)
         Frees the given os list. Returns 0 on success or an errno style error
         code otherwise.

int osi_distro_list_length(osi_os_list_t list)
         Returns the length of the given os list.

osi_os_t osi_get_os_by_index(osi_os_list_t list, int index)
         Returns a handle to an os object from a list given the index.

osi_os_t osi_get_os_by_id(osi_lib_t lib, osi_os_id_t id)
         Returns a handle to an os object given the opaque id.

_______________________________________

Filtering Operating System objects
_______________________________________

osi_filter_t osi_get_filter(osi_lib_t lib);
         Returns a filter object that we can use to filter operating systems.
         Must be checked with osi_is_error(handle). Must be freed using
         osi_free_filter(filter) when user is done using it.

int osi_free_filter(osi_filter_t filter)
         Frees a filter acquired with osi_get_filter(lib). Returns 0 on success,
         or an errno style error code otherwise.

int osi_add_constraint(osi_filter_t filter, char* propname, char* propval)
         Adds a constraint to a filter. Resulting filter will only match os
         objects with the given property existing, and having the corresponding
         value equal to the given value.

         Returns 0 on success, or an errno style error code otherwise.

int osi_add_relation_constraint(osi_filter_t filter, enum_t relationship, osi_os_t os);
         Adds a relationship constraint to the filter. The resulting filter
         will only accept operating systems that have the given relationship
         with the given operating system.

         Returns 0 on success, or an errno style error code otherwise.

int osi_clear_constraint(osi_filter_t filter, char* propname)
         Clears the given constraint on the filter.

         Returns 0 on success, or an errno style error code otherwise.

int osi_clear_relation_constraint(osi_filter_t filter, enum_t relationship)
         Clears the given relationship constraint on the filter.

         Returns 0 on success, or an errno style error code otherwise.

int osi_clear_all_constraints(osi_filter_t filter);
         Clears all constraints on the filter.

         Returns 0 on success, or an errno style error code otherwise.

_______________________________________

Manipulating Operating System objects
_______________________________________

osi_os_id_t osi_get_os_id(osi_os_t os)
         Returns the opaque id for the given os.

osi_os_t osi_get_related_os(osi_os_t os, enum_t relationship);
         Returns the related operating system of the given relationship.
         If there is no operating system with related in this fashion, returns
         a result that will fail the osi_is_error(handle) check.

char* osi_get_property_first_value(osi_os_t os, char* propname)
         Returns the value for the os of a given property. If there is more
         than one value, the first is considered to be the 'preferred' value.
         The result must be freed when finished with use.

char** osi_get_property_all_values(osi_distro_t distro, char* propname, int* num);
         Returns all values for a given property in an array. The length of the
         array is stored in num. Must be freed when done with use. If num == 0,
         the return value is invalid and must not be freed.

char** osi_get_all_property_keys(osi_distro_t distro, int* num);
         Returns all properties for an os in an array. The length of the
         array is stored in num. Must be freed when done with use. If num == 0,
         the return value is invalid and must not be freed.

char** osi_unique_property_values(osi_lib_t lib, char* propname, int* num);
         Returns all unique values for a given property, across all operating
         systems, in an array. The length of the array is stored in num. Must
         be freed when done with use. If num == 0, the return value is invalid
         and must not be freed.

os_os_list_t osi_unique_relationship_values(osi_lib_t lib, enum_t relationship);
         Returns all operating systems that participate in the given
         relationship at least once.

